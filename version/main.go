package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

func version() (string, error) {
	cmd := exec.Command("git", "log", "-n", "1", "--format=format:+%h %cd", "HEAD")
	data, err := cmd.Output()
	if err != nil {
		return "", err
	}
	return string(data), nil
}

type Version struct {
	Generated string
	Pkgname   string
	Version   string
}

func main() {
	var (
		output  = flag.String("o", "", "write version information to file")
		pkgname = flag.String("pkg", "main", "generated package name")
		prefix  = flag.String("prefix", "", "version information prefix")
	)

	flag.Parse()

	var w io.Writer
	if *output != "" {
		f, err := os.Create(*output)
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()
		w = f
	} else {
		w = os.Stdout
	}

	tmpl, err := template.New("version").Parse(`{{.Generated}}; DO NOT EDIT!

package {{.Pkgname}}

func Version() string { return "{{.Version}}" }`)
	if err != nil {
		log.Fatal(err)
	}

	version, err := version()
	if err != nil {
		log.Fatal(err)
	}

	v := Version{
		Generated: fmt.Sprintf(`// Code generated by %q`, strings.Join(os.Args, " ")),
		Pkgname:   *pkgname,
	}
	if *prefix != "" {
		v.Version = *prefix + " " + version
	} else {
		v.Version = version
	}

	buf := bytes.Buffer{}
	if err = tmpl.Execute(&buf, v); err != nil {
		log.Fatal(err)
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	fmt.Fprintf(w, "%s\n", data)
}
